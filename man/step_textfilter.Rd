% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/textfilter.R
\name{step_textfilter}
\alias{step_textfilter}
\alias{tidy.step_textfilter}
\title{Filter the tokens based on term frequency}
\usage{
step_textfilter(recipe, ..., role = NA, trained = FALSE,
  columns = NULL, max.tf = Inf, min.tf = 0, procentage = FALSE,
  max.words = NULL, res = NULL, skip = FALSE)

\method{tidy}{step_textfilter}(x, ...)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables.
For `step_textfilter`, this indicates the variables to be encoded
into a list column. See [recipes::selections()] for more
details. For the `tidy` method, these are not currently used.}

\item{role}{Not used by this step since no new variables are
created.}

\item{trained}{A logical to indicate if the recipe has been
baked.}

\item{columns}{A list of tibble results that define the
encoding. This is `NULL` until the step is trained by
[recipes::prep.recipe()].}

\item{max.tf}{An integer. Maximal number of times a word can appear
before getting removed.}

\item{min.tf}{An integer. Minimum number of times a word can appear
before getting removed.}

\item{procentage}{A logical. Should max.tf and min.tf be interpreded 
as a procentage instead of count.}

\item{max.words}{An integer. Will only keep the top max.words words
after filtering done by max.tf and min.tf.}

\item{res}{The words that will be keep will be stored here once 
this preprocessing step has be trained by [prep.recipe()].}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by [recipes::bake.recipe()]? While all
operations are baked when [recipes::prep.recipe()] is run, some
operations may not be able to be conducted on new data (e.g.
processing the outcome variable(s)). Care should be taken when
using `skip = TRUE` as it may affect the computations for
subsequent operations}

\item{x}{A `step_textfilter` object.}
}
\value{
An updated version of `recipe` with the new step added
 to the sequence of existing steps (if any).
}
\description{
`step_textfilter` creates a *specification* of a recipe step that
 will convert a list of its tokenized parts into a list where the 
 tokens are filtered based on frequency.
}
\examples{
library(recipes)

data(okc_text)

okc_rec <- recipe(~ ., data = okc_text) \%>\%
  step_tokenize(essay0) \%>\%
  step_textfilter(essay0, max.words = 10) 
  
okc_obj <- okc_rec \%>\%
  prep(training = okc_text, retain = TRUE)

juice(okc_obj, essay0) \%>\% 
  slice(1:2)

juice(okc_obj) \%>\% 
  slice(2) \%>\% 
  pull(essay0)

tidy(okc_rec, number = 2)
tidy(okc_obj, number = 2)
}
\concept{preprocessing encoding}
\keyword{datagen}
